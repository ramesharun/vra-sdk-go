// Code generated by go-swagger; DO NOT EDIT.

package catalog_sources

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// NewPostUsingPOSTParams creates a new PostUsingPOSTParams object
// with the default values initialized.
func NewPostUsingPOSTParams() *PostUsingPOSTParams {
	var ()
	return &PostUsingPOSTParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostUsingPOSTParamsWithTimeout creates a new PostUsingPOSTParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostUsingPOSTParamsWithTimeout(timeout time.Duration) *PostUsingPOSTParams {
	var ()
	return &PostUsingPOSTParams{

		timeout: timeout,
	}
}

// NewPostUsingPOSTParamsWithContext creates a new PostUsingPOSTParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostUsingPOSTParamsWithContext(ctx context.Context) *PostUsingPOSTParams {
	var ()
	return &PostUsingPOSTParams{

		Context: ctx,
	}
}

// NewPostUsingPOSTParamsWithHTTPClient creates a new PostUsingPOSTParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostUsingPOSTParamsWithHTTPClient(client *http.Client) *PostUsingPOSTParams {
	var ()
	return &PostUsingPOSTParams{
		HTTPClient: client,
	}
}

/*PostUsingPOSTParams contains all the parameters to send to the API endpoint
for the post using p o s t operation typically these are written to a http.Request
*/
type PostUsingPOSTParams struct {

	/*APIVersion
	  The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /catalog/api/about

	*/
	APIVersion *string
	/*Source
	  The catalog source to be created

	*/
	Source *models.CatalogSource
	/*ValidationOnly
	  If true, the source will not be created. It returns the number of items belonging to the source. The request will still return an error code if the source is invalid.

	*/
	ValidationOnly *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post using p o s t params
func (o *PostUsingPOSTParams) WithTimeout(timeout time.Duration) *PostUsingPOSTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post using p o s t params
func (o *PostUsingPOSTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post using p o s t params
func (o *PostUsingPOSTParams) WithContext(ctx context.Context) *PostUsingPOSTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post using p o s t params
func (o *PostUsingPOSTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post using p o s t params
func (o *PostUsingPOSTParams) WithHTTPClient(client *http.Client) *PostUsingPOSTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post using p o s t params
func (o *PostUsingPOSTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAPIVersion adds the aPIVersion to the post using p o s t params
func (o *PostUsingPOSTParams) WithAPIVersion(aPIVersion *string) *PostUsingPOSTParams {
	o.SetAPIVersion(aPIVersion)
	return o
}

// SetAPIVersion adds the apiVersion to the post using p o s t params
func (o *PostUsingPOSTParams) SetAPIVersion(aPIVersion *string) {
	o.APIVersion = aPIVersion
}

// WithSource adds the source to the post using p o s t params
func (o *PostUsingPOSTParams) WithSource(source *models.CatalogSource) *PostUsingPOSTParams {
	o.SetSource(source)
	return o
}

// SetSource adds the source to the post using p o s t params
func (o *PostUsingPOSTParams) SetSource(source *models.CatalogSource) {
	o.Source = source
}

// WithValidationOnly adds the validationOnly to the post using p o s t params
func (o *PostUsingPOSTParams) WithValidationOnly(validationOnly *bool) *PostUsingPOSTParams {
	o.SetValidationOnly(validationOnly)
	return o
}

// SetValidationOnly adds the validationOnly to the post using p o s t params
func (o *PostUsingPOSTParams) SetValidationOnly(validationOnly *bool) {
	o.ValidationOnly = validationOnly
}

// WriteToRequest writes these params to a swagger request
func (o *PostUsingPOSTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.APIVersion != nil {

		// query param apiVersion
		var qrAPIVersion string
		if o.APIVersion != nil {
			qrAPIVersion = *o.APIVersion
		}
		qAPIVersion := qrAPIVersion
		if qAPIVersion != "" {
			if err := r.SetQueryParam("apiVersion", qAPIVersion); err != nil {
				return err
			}
		}

	}

	if o.Source != nil {
		if err := r.SetBodyParam(o.Source); err != nil {
			return err
		}
	}

	if o.ValidationOnly != nil {

		// query param validationOnly
		var qrValidationOnly bool
		if o.ValidationOnly != nil {
			qrValidationOnly = *o.ValidationOnly
		}
		qValidationOnly := swag.FormatBool(qrValidationOnly)
		if qValidationOnly != "" {
			if err := r.SetQueryParam("validationOnly", qValidationOnly); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

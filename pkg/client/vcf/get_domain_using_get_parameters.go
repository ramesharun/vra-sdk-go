// Code generated by go-swagger; DO NOT EDIT.

package vcf

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetDomainUsingGETParams creates a new GetDomainUsingGETParams object
// with the default values initialized.
func NewGetDomainUsingGETParams() *GetDomainUsingGETParams {
	var ()
	return &GetDomainUsingGETParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetDomainUsingGETParamsWithTimeout creates a new GetDomainUsingGETParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetDomainUsingGETParamsWithTimeout(timeout time.Duration) *GetDomainUsingGETParams {
	var ()
	return &GetDomainUsingGETParams{

		timeout: timeout,
	}
}

// NewGetDomainUsingGETParamsWithContext creates a new GetDomainUsingGETParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetDomainUsingGETParamsWithContext(ctx context.Context) *GetDomainUsingGETParams {
	var ()
	return &GetDomainUsingGETParams{

		Context: ctx,
	}
}

// NewGetDomainUsingGETParamsWithHTTPClient creates a new GetDomainUsingGETParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetDomainUsingGETParamsWithHTTPClient(client *http.Client) *GetDomainUsingGETParams {
	var ()
	return &GetDomainUsingGETParams{
		HTTPClient: client,
	}
}

/*GetDomainUsingGETParams contains all the parameters to send to the API endpoint
for the get domain using g e t operation typically these are written to a http.Request
*/
type GetDomainUsingGETParams struct {

	/*DomainID
	  domainId

	*/
	DomainID string
	/*IntegrationID
	  integrationId

	*/
	IntegrationID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get domain using get params
func (o *GetDomainUsingGETParams) WithTimeout(timeout time.Duration) *GetDomainUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get domain using get params
func (o *GetDomainUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get domain using get params
func (o *GetDomainUsingGETParams) WithContext(ctx context.Context) *GetDomainUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get domain using get params
func (o *GetDomainUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get domain using get params
func (o *GetDomainUsingGETParams) WithHTTPClient(client *http.Client) *GetDomainUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get domain using get params
func (o *GetDomainUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDomainID adds the domainID to the get domain using get params
func (o *GetDomainUsingGETParams) WithDomainID(domainID string) *GetDomainUsingGETParams {
	o.SetDomainID(domainID)
	return o
}

// SetDomainID adds the domainId to the get domain using get params
func (o *GetDomainUsingGETParams) SetDomainID(domainID string) {
	o.DomainID = domainID
}

// WithIntegrationID adds the integrationID to the get domain using get params
func (o *GetDomainUsingGETParams) WithIntegrationID(integrationID string) *GetDomainUsingGETParams {
	o.SetIntegrationID(integrationID)
	return o
}

// SetIntegrationID adds the integrationId to the get domain using get params
func (o *GetDomainUsingGETParams) SetIntegrationID(integrationID string) {
	o.IntegrationID = integrationID
}

// WriteToRequest writes these params to a swagger request
func (o *GetDomainUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param domainId
	if err := r.SetPathParam("domainId", o.DomainID); err != nil {
		return err
	}

	// path param integrationId
	if err := r.SetPathParam("integrationId", o.IntegrationID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

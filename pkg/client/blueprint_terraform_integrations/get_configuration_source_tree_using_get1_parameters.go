// Code generated by go-swagger; DO NOT EDIT.

package blueprint_terraform_integrations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetConfigurationSourceTreeUsingGET1Params creates a new GetConfigurationSourceTreeUsingGET1Params object
// with the default values initialized.
func NewGetConfigurationSourceTreeUsingGET1Params() *GetConfigurationSourceTreeUsingGET1Params {
	var ()
	return &GetConfigurationSourceTreeUsingGET1Params{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetConfigurationSourceTreeUsingGET1ParamsWithTimeout creates a new GetConfigurationSourceTreeUsingGET1Params object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetConfigurationSourceTreeUsingGET1ParamsWithTimeout(timeout time.Duration) *GetConfigurationSourceTreeUsingGET1Params {
	var ()
	return &GetConfigurationSourceTreeUsingGET1Params{

		timeout: timeout,
	}
}

// NewGetConfigurationSourceTreeUsingGET1ParamsWithContext creates a new GetConfigurationSourceTreeUsingGET1Params object
// with the default values initialized, and the ability to set a context for a request
func NewGetConfigurationSourceTreeUsingGET1ParamsWithContext(ctx context.Context) *GetConfigurationSourceTreeUsingGET1Params {
	var ()
	return &GetConfigurationSourceTreeUsingGET1Params{

		Context: ctx,
	}
}

// NewGetConfigurationSourceTreeUsingGET1ParamsWithHTTPClient creates a new GetConfigurationSourceTreeUsingGET1Params object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetConfigurationSourceTreeUsingGET1ParamsWithHTTPClient(client *http.Client) *GetConfigurationSourceTreeUsingGET1Params {
	var ()
	return &GetConfigurationSourceTreeUsingGET1Params{
		HTTPClient: client,
	}
}

/*GetConfigurationSourceTreeUsingGET1Params contains all the parameters to send to the API endpoint
for the get configuration source tree using get1 operation typically these are written to a http.Request
*/
type GetConfigurationSourceTreeUsingGET1Params struct {

	/*CommitID
	  The commit ID corresponding to the version of the configuration source.

	*/
	CommitID *string
	/*ConfigurationSourceID
	  The ID of the configuration source to inspect.

	*/
	ConfigurationSourceID strfmt.UUID
	/*Path
	  A file path prefix. The prefix is interpreted in the context of the configuration source's path prefix. Results will only include directories under this path.

	*/
	Path *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get configuration source tree using get1 params
func (o *GetConfigurationSourceTreeUsingGET1Params) WithTimeout(timeout time.Duration) *GetConfigurationSourceTreeUsingGET1Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get configuration source tree using get1 params
func (o *GetConfigurationSourceTreeUsingGET1Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get configuration source tree using get1 params
func (o *GetConfigurationSourceTreeUsingGET1Params) WithContext(ctx context.Context) *GetConfigurationSourceTreeUsingGET1Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get configuration source tree using get1 params
func (o *GetConfigurationSourceTreeUsingGET1Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get configuration source tree using get1 params
func (o *GetConfigurationSourceTreeUsingGET1Params) WithHTTPClient(client *http.Client) *GetConfigurationSourceTreeUsingGET1Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get configuration source tree using get1 params
func (o *GetConfigurationSourceTreeUsingGET1Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCommitID adds the commitID to the get configuration source tree using get1 params
func (o *GetConfigurationSourceTreeUsingGET1Params) WithCommitID(commitID *string) *GetConfigurationSourceTreeUsingGET1Params {
	o.SetCommitID(commitID)
	return o
}

// SetCommitID adds the commitId to the get configuration source tree using get1 params
func (o *GetConfigurationSourceTreeUsingGET1Params) SetCommitID(commitID *string) {
	o.CommitID = commitID
}

// WithConfigurationSourceID adds the configurationSourceID to the get configuration source tree using get1 params
func (o *GetConfigurationSourceTreeUsingGET1Params) WithConfigurationSourceID(configurationSourceID strfmt.UUID) *GetConfigurationSourceTreeUsingGET1Params {
	o.SetConfigurationSourceID(configurationSourceID)
	return o
}

// SetConfigurationSourceID adds the configurationSourceId to the get configuration source tree using get1 params
func (o *GetConfigurationSourceTreeUsingGET1Params) SetConfigurationSourceID(configurationSourceID strfmt.UUID) {
	o.ConfigurationSourceID = configurationSourceID
}

// WithPath adds the path to the get configuration source tree using get1 params
func (o *GetConfigurationSourceTreeUsingGET1Params) WithPath(path *string) *GetConfigurationSourceTreeUsingGET1Params {
	o.SetPath(path)
	return o
}

// SetPath adds the path to the get configuration source tree using get1 params
func (o *GetConfigurationSourceTreeUsingGET1Params) SetPath(path *string) {
	o.Path = path
}

// WriteToRequest writes these params to a swagger request
func (o *GetConfigurationSourceTreeUsingGET1Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CommitID != nil {

		// query param commitId
		var qrCommitID string
		if o.CommitID != nil {
			qrCommitID = *o.CommitID
		}
		qCommitID := qrCommitID
		if qCommitID != "" {
			if err := r.SetQueryParam("commitId", qCommitID); err != nil {
				return err
			}
		}

	}

	// query param configurationSourceId
	qrConfigurationSourceID := o.ConfigurationSourceID
	qConfigurationSourceID := qrConfigurationSourceID.String()
	if qConfigurationSourceID != "" {
		if err := r.SetQueryParam("configurationSourceId", qConfigurationSourceID); err != nil {
			return err
		}
	}

	if o.Path != nil {

		// query param path
		var qrPath string
		if o.Path != nil {
			qrPath = *o.Path
		}
		qPath := qrPath
		if qPath != "" {
			if err := r.SetQueryParam("path", qPath); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

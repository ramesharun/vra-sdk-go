// Code generated by go-swagger; DO NOT EDIT.

package blueprint_terraform_integrations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// NewUpdateTerraformVersionUsingPATCH1Params creates a new UpdateTerraformVersionUsingPATCH1Params object
// with the default values initialized.
func NewUpdateTerraformVersionUsingPATCH1Params() *UpdateTerraformVersionUsingPATCH1Params {
	var ()
	return &UpdateTerraformVersionUsingPATCH1Params{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateTerraformVersionUsingPATCH1ParamsWithTimeout creates a new UpdateTerraformVersionUsingPATCH1Params object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateTerraformVersionUsingPATCH1ParamsWithTimeout(timeout time.Duration) *UpdateTerraformVersionUsingPATCH1Params {
	var ()
	return &UpdateTerraformVersionUsingPATCH1Params{

		timeout: timeout,
	}
}

// NewUpdateTerraformVersionUsingPATCH1ParamsWithContext creates a new UpdateTerraformVersionUsingPATCH1Params object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateTerraformVersionUsingPATCH1ParamsWithContext(ctx context.Context) *UpdateTerraformVersionUsingPATCH1Params {
	var ()
	return &UpdateTerraformVersionUsingPATCH1Params{

		Context: ctx,
	}
}

// NewUpdateTerraformVersionUsingPATCH1ParamsWithHTTPClient creates a new UpdateTerraformVersionUsingPATCH1Params object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateTerraformVersionUsingPATCH1ParamsWithHTTPClient(client *http.Client) *UpdateTerraformVersionUsingPATCH1Params {
	var ()
	return &UpdateTerraformVersionUsingPATCH1Params{
		HTTPClient: client,
	}
}

/*UpdateTerraformVersionUsingPATCH1Params contains all the parameters to send to the API endpoint
for the update terraform version using p a t c h 1 operation typically these are written to a http.Request
*/
type UpdateTerraformVersionUsingPATCH1Params struct {

	/*TerraformVersion
	  Terraform version object

	*/
	TerraformVersion *models.TerraformVersion
	/*VersionID
	  versionId

	*/
	VersionID strfmt.UUID

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update terraform version using p a t c h 1 params
func (o *UpdateTerraformVersionUsingPATCH1Params) WithTimeout(timeout time.Duration) *UpdateTerraformVersionUsingPATCH1Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update terraform version using p a t c h 1 params
func (o *UpdateTerraformVersionUsingPATCH1Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update terraform version using p a t c h 1 params
func (o *UpdateTerraformVersionUsingPATCH1Params) WithContext(ctx context.Context) *UpdateTerraformVersionUsingPATCH1Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update terraform version using p a t c h 1 params
func (o *UpdateTerraformVersionUsingPATCH1Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update terraform version using p a t c h 1 params
func (o *UpdateTerraformVersionUsingPATCH1Params) WithHTTPClient(client *http.Client) *UpdateTerraformVersionUsingPATCH1Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update terraform version using p a t c h 1 params
func (o *UpdateTerraformVersionUsingPATCH1Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithTerraformVersion adds the terraformVersion to the update terraform version using p a t c h 1 params
func (o *UpdateTerraformVersionUsingPATCH1Params) WithTerraformVersion(terraformVersion *models.TerraformVersion) *UpdateTerraformVersionUsingPATCH1Params {
	o.SetTerraformVersion(terraformVersion)
	return o
}

// SetTerraformVersion adds the terraformVersion to the update terraform version using p a t c h 1 params
func (o *UpdateTerraformVersionUsingPATCH1Params) SetTerraformVersion(terraformVersion *models.TerraformVersion) {
	o.TerraformVersion = terraformVersion
}

// WithVersionID adds the versionID to the update terraform version using p a t c h 1 params
func (o *UpdateTerraformVersionUsingPATCH1Params) WithVersionID(versionID strfmt.UUID) *UpdateTerraformVersionUsingPATCH1Params {
	o.SetVersionID(versionID)
	return o
}

// SetVersionID adds the versionId to the update terraform version using p a t c h 1 params
func (o *UpdateTerraformVersionUsingPATCH1Params) SetVersionID(versionID strfmt.UUID) {
	o.VersionID = versionID
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateTerraformVersionUsingPATCH1Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.TerraformVersion != nil {
		if err := r.SetBodyParam(o.TerraformVersion); err != nil {
			return err
		}
	}

	// path param versionId
	if err := r.SetPathParam("versionId", o.VersionID.String()); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

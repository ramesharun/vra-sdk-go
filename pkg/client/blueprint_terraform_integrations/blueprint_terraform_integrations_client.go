// Code generated by go-swagger; DO NOT EDIT.

package blueprint_terraform_integrations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new blueprint terraform integrations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for blueprint terraform integrations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateBlueprintFromMappingUsingPOST1(params *CreateBlueprintFromMappingUsingPOST1Params) (*CreateBlueprintFromMappingUsingPOST1OK, error)

	CreateBlueprintMappingUsingPOST1(params *CreateBlueprintMappingUsingPOST1Params) (*CreateBlueprintMappingUsingPOST1OK, error)

	CreateTerraformVersionUsingPOST1(params *CreateTerraformVersionUsingPOST1Params) (*CreateTerraformVersionUsingPOST1Created, error)

	DeleteTerraformVersionUsingDELETE1(params *DeleteTerraformVersionUsingDELETE1Params) (*DeleteTerraformVersionUsingDELETE1NoContent, error)

	GetConfigurationSourceTreeUsingGET1(params *GetConfigurationSourceTreeUsingGET1Params) (*GetConfigurationSourceTreeUsingGET1OK, error)

	GetTerraformConfigurationSourceCommitListUsingGET1(params *GetTerraformConfigurationSourceCommitListUsingGET1Params) (*GetTerraformConfigurationSourceCommitListUsingGET1OK, error)

	GetTerraformConfigurationSourcesUsingGET1(params *GetTerraformConfigurationSourcesUsingGET1Params) (*GetTerraformConfigurationSourcesUsingGET1OK, error)

	GetTerraformVersionUsingGET1(params *GetTerraformVersionUsingGET1Params) (*GetTerraformVersionUsingGET1OK, error)

	ListTerraformVersionsUsingGET1(params *ListTerraformVersionsUsingGET1Params) (*ListTerraformVersionsUsingGET1OK, error)

	UpdateTerraformVersionUsingPATCH1(params *UpdateTerraformVersionUsingPATCH1Params) (*UpdateTerraformVersionUsingPATCH1OK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateBlueprintFromMappingUsingPOST1 creates a blueprint from a terraform blueprint configuration obtained from create blueprint mapping
*/
func (a *Client) CreateBlueprintFromMappingUsingPOST1(params *CreateBlueprintFromMappingUsingPOST1Params) (*CreateBlueprintFromMappingUsingPOST1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateBlueprintFromMappingUsingPOST1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createBlueprintFromMappingUsingPOST_1",
		Method:             "POST",
		PathPattern:        "/blueprint/api/blueprint-integrations/terraform/create-blueprint-from-mapping",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateBlueprintFromMappingUsingPOST1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateBlueprintFromMappingUsingPOST1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createBlueprintFromMappingUsingPOST_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateBlueprintMappingUsingPOST1 retrieves and parses the specified terraform configuration file s and returns relevant information for blueprint construction
*/
func (a *Client) CreateBlueprintMappingUsingPOST1(params *CreateBlueprintMappingUsingPOST1Params) (*CreateBlueprintMappingUsingPOST1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateBlueprintMappingUsingPOST1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createBlueprintMappingUsingPOST_1",
		Method:             "POST",
		PathPattern:        "/blueprint/api/blueprint-integrations/terraform/create-blueprint-mapping",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateBlueprintMappingUsingPOST1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateBlueprintMappingUsingPOST1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createBlueprintMappingUsingPOST_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateTerraformVersionUsingPOST1 creates a version
*/
func (a *Client) CreateTerraformVersionUsingPOST1(params *CreateTerraformVersionUsingPOST1Params) (*CreateTerraformVersionUsingPOST1Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTerraformVersionUsingPOST1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createTerraformVersionUsingPOST_1",
		Method:             "POST",
		PathPattern:        "/blueprint/api/blueprint-integrations/terraform/versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateTerraformVersionUsingPOST1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateTerraformVersionUsingPOST1Created)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createTerraformVersionUsingPOST_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteTerraformVersionUsingDELETE1 deletes a terraform version
*/
func (a *Client) DeleteTerraformVersionUsingDELETE1(params *DeleteTerraformVersionUsingDELETE1Params) (*DeleteTerraformVersionUsingDELETE1NoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTerraformVersionUsingDELETE1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteTerraformVersionUsingDELETE_1",
		Method:             "DELETE",
		PathPattern:        "/blueprint/api/blueprint-integrations/terraform/versions/{versionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTerraformVersionUsingDELETE1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTerraformVersionUsingDELETE1NoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteTerraformVersionUsingDELETE_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetConfigurationSourceTreeUsingGET1 shows directories of the configuration source repository that correspond to terraform configurations
*/
func (a *Client) GetConfigurationSourceTreeUsingGET1(params *GetConfigurationSourceTreeUsingGET1Params) (*GetConfigurationSourceTreeUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConfigurationSourceTreeUsingGET1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getConfigurationSourceTreeUsingGET_1",
		Method:             "GET",
		PathPattern:        "/blueprint/api/blueprint-integrations/terraform/get-configuration-source-tree",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetConfigurationSourceTreeUsingGET1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetConfigurationSourceTreeUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getConfigurationSourceTreeUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTerraformConfigurationSourceCommitListUsingGET1 returns a paginated list of commits for a specified configuration source
*/
func (a *Client) GetTerraformConfigurationSourceCommitListUsingGET1(params *GetTerraformConfigurationSourceCommitListUsingGET1Params) (*GetTerraformConfigurationSourceCommitListUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTerraformConfigurationSourceCommitListUsingGET1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTerraformConfigurationSourceCommitListUsingGET_1",
		Method:             "GET",
		PathPattern:        "/blueprint/api/blueprint-integrations/terraform/get-configuration-source-commits",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTerraformConfigurationSourceCommitListUsingGET1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTerraformConfigurationSourceCommitListUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTerraformConfigurationSourceCommitListUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTerraformConfigurationSourcesUsingGET1 returns a paginated list of configuration sources configured as storage for terraform configurations
*/
func (a *Client) GetTerraformConfigurationSourcesUsingGET1(params *GetTerraformConfigurationSourcesUsingGET1Params) (*GetTerraformConfigurationSourcesUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTerraformConfigurationSourcesUsingGET1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTerraformConfigurationSourcesUsingGET_1",
		Method:             "GET",
		PathPattern:        "/blueprint/api/blueprint-integrations/terraform/get-configuration-sources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTerraformConfigurationSourcesUsingGET1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTerraformConfigurationSourcesUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTerraformConfigurationSourcesUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTerraformVersionUsingGET1 returns terraform version details
*/
func (a *Client) GetTerraformVersionUsingGET1(params *GetTerraformVersionUsingGET1Params) (*GetTerraformVersionUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTerraformVersionUsingGET1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTerraformVersionUsingGET_1",
		Method:             "GET",
		PathPattern:        "/blueprint/api/blueprint-integrations/terraform/versions/{versionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTerraformVersionUsingGET1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTerraformVersionUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTerraformVersionUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListTerraformVersionsUsingGET1 lists terraform versions
*/
func (a *Client) ListTerraformVersionsUsingGET1(params *ListTerraformVersionsUsingGET1Params) (*ListTerraformVersionsUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListTerraformVersionsUsingGET1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listTerraformVersionsUsingGET_1",
		Method:             "GET",
		PathPattern:        "/blueprint/api/blueprint-integrations/terraform/versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListTerraformVersionsUsingGET1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListTerraformVersionsUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listTerraformVersionsUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateTerraformVersionUsingPATCH1 updates a terraform version
*/
func (a *Client) UpdateTerraformVersionUsingPATCH1(params *UpdateTerraformVersionUsingPATCH1Params) (*UpdateTerraformVersionUsingPATCH1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTerraformVersionUsingPATCH1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateTerraformVersionUsingPATCH_1",
		Method:             "PATCH",
		PathPattern:        "/blueprint/api/blueprint-integrations/terraform/versions/{versionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateTerraformVersionUsingPATCH1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTerraformVersionUsingPATCH1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateTerraformVersionUsingPATCH_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

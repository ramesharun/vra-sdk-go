// Code generated by go-swagger; DO NOT EDIT.

package deployment_requests

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// GetRequestEventsUsingGETReader is a Reader for the GetRequestEventsUsingGET structure.
type GetRequestEventsUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRequestEventsUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRequestEventsUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetRequestEventsUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRequestEventsUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetRequestEventsUsingGETOK creates a GetRequestEventsUsingGETOK with default headers values
func NewGetRequestEventsUsingGETOK() *GetRequestEventsUsingGETOK {
	return &GetRequestEventsUsingGETOK{}
}

/*GetRequestEventsUsingGETOK handles this case with default header values.

OK
*/
type GetRequestEventsUsingGETOK struct {
	Payload *models.PageOfEvent
}

func (o *GetRequestEventsUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /deployment/api/deployments/{depId}/requests/{requestId}/events][%d] getRequestEventsUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetRequestEventsUsingGETOK) GetPayload() *models.PageOfEvent {
	return o.Payload
}

func (o *GetRequestEventsUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PageOfEvent)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRequestEventsUsingGETUnauthorized creates a GetRequestEventsUsingGETUnauthorized with default headers values
func NewGetRequestEventsUsingGETUnauthorized() *GetRequestEventsUsingGETUnauthorized {
	return &GetRequestEventsUsingGETUnauthorized{}
}

/*GetRequestEventsUsingGETUnauthorized handles this case with default header values.

Unauthorized
*/
type GetRequestEventsUsingGETUnauthorized struct {
}

func (o *GetRequestEventsUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /deployment/api/deployments/{depId}/requests/{requestId}/events][%d] getRequestEventsUsingGETUnauthorized ", 401)
}

func (o *GetRequestEventsUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetRequestEventsUsingGETNotFound creates a GetRequestEventsUsingGETNotFound with default headers values
func NewGetRequestEventsUsingGETNotFound() *GetRequestEventsUsingGETNotFound {
	return &GetRequestEventsUsingGETNotFound{}
}

/*GetRequestEventsUsingGETNotFound handles this case with default header values.

Not Found
*/
type GetRequestEventsUsingGETNotFound struct {
	Payload *models.Error
}

func (o *GetRequestEventsUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /deployment/api/deployments/{depId}/requests/{requestId}/events][%d] getRequestEventsUsingGETNotFound  %+v", 404, o.Payload)
}

func (o *GetRequestEventsUsingGETNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRequestEventsUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

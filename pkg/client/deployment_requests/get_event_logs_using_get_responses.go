// Code generated by go-swagger; DO NOT EDIT.

package deployment_requests

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// GetEventLogsUsingGETReader is a Reader for the GetEventLogsUsingGET structure.
type GetEventLogsUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetEventLogsUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetEventLogsUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetEventLogsUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetEventLogsUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetEventLogsUsingGETOK creates a GetEventLogsUsingGETOK with default headers values
func NewGetEventLogsUsingGETOK() *GetEventLogsUsingGETOK {
	return &GetEventLogsUsingGETOK{}
}

/*GetEventLogsUsingGETOK handles this case with default header values.

OK
*/
type GetEventLogsUsingGETOK struct {
	Payload *models.SliceOfEventLog
}

func (o *GetEventLogsUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /deployment/api/deployments/{depId}/requests/{requestId}/events/{eventId}/logs][%d] getEventLogsUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetEventLogsUsingGETOK) GetPayload() *models.SliceOfEventLog {
	return o.Payload
}

func (o *GetEventLogsUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SliceOfEventLog)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEventLogsUsingGETUnauthorized creates a GetEventLogsUsingGETUnauthorized with default headers values
func NewGetEventLogsUsingGETUnauthorized() *GetEventLogsUsingGETUnauthorized {
	return &GetEventLogsUsingGETUnauthorized{}
}

/*GetEventLogsUsingGETUnauthorized handles this case with default header values.

Unauthorized
*/
type GetEventLogsUsingGETUnauthorized struct {
}

func (o *GetEventLogsUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /deployment/api/deployments/{depId}/requests/{requestId}/events/{eventId}/logs][%d] getEventLogsUsingGETUnauthorized ", 401)
}

func (o *GetEventLogsUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetEventLogsUsingGETNotFound creates a GetEventLogsUsingGETNotFound with default headers values
func NewGetEventLogsUsingGETNotFound() *GetEventLogsUsingGETNotFound {
	return &GetEventLogsUsingGETNotFound{}
}

/*GetEventLogsUsingGETNotFound handles this case with default header values.

Not Found
*/
type GetEventLogsUsingGETNotFound struct {
	Payload *models.Error
}

func (o *GetEventLogsUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /deployment/api/deployments/{depId}/requests/{requestId}/events/{eventId}/logs][%d] getEventLogsUsingGETNotFound  %+v", 404, o.Payload)
}

func (o *GetEventLogsUsingGETNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetEventLogsUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

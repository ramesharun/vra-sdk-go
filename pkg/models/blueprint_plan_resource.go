// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BlueprintPlanResource BlueprintPlanResource
//
// swagger:model BlueprintPlanResource
type BlueprintPlanResource struct {

	// Resource depends on other resources in the plan
	// Read Only: true
	DependsOnResources []string `json:"dependsOnResources"`

	// Resource new properties
	// Read Only: true
	NewProperties interface{} `json:"newProperties,omitempty"`

	// Resource old properties
	// Read Only: true
	OldProperties interface{} `json:"oldProperties,omitempty"`

	// Resource name
	// Read Only: true
	ResourceName string `json:"resourceName,omitempty"`

	// Resource reason
	// Read Only: true
	// Enum: [CREATE RECREATE UPDATE DELETE ACTION READ]
	ResourceReason string `json:"resourceReason,omitempty"`

	// Resource type
	// Read Only: true
	ResourceType string `json:"resourceType,omitempty"`

	// List of task names
	// Read Only: true
	TaskNames []string `json:"taskNames"`
}

// Validate validates this blueprint plan resource
func (m *BlueprintPlanResource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResourceReason(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var blueprintPlanResourceTypeResourceReasonPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CREATE","RECREATE","UPDATE","DELETE","ACTION","READ"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		blueprintPlanResourceTypeResourceReasonPropEnum = append(blueprintPlanResourceTypeResourceReasonPropEnum, v)
	}
}

const (

	// BlueprintPlanResourceResourceReasonCREATE captures enum value "CREATE"
	BlueprintPlanResourceResourceReasonCREATE string = "CREATE"

	// BlueprintPlanResourceResourceReasonRECREATE captures enum value "RECREATE"
	BlueprintPlanResourceResourceReasonRECREATE string = "RECREATE"

	// BlueprintPlanResourceResourceReasonUPDATE captures enum value "UPDATE"
	BlueprintPlanResourceResourceReasonUPDATE string = "UPDATE"

	// BlueprintPlanResourceResourceReasonDELETE captures enum value "DELETE"
	BlueprintPlanResourceResourceReasonDELETE string = "DELETE"

	// BlueprintPlanResourceResourceReasonACTION captures enum value "ACTION"
	BlueprintPlanResourceResourceReasonACTION string = "ACTION"

	// BlueprintPlanResourceResourceReasonREAD captures enum value "READ"
	BlueprintPlanResourceResourceReasonREAD string = "READ"
)

// prop value enum
func (m *BlueprintPlanResource) validateResourceReasonEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, blueprintPlanResourceTypeResourceReasonPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *BlueprintPlanResource) validateResourceReason(formats strfmt.Registry) error {

	if swag.IsZero(m.ResourceReason) { // not required
		return nil
	}

	// value enum
	if err := m.validateResourceReasonEnum("resourceReason", "body", m.ResourceReason); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BlueprintPlanResource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BlueprintPlanResource) UnmarshalBinary(b []byte) error {
	var res BlueprintPlanResource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ImageMapping Describes an image mapping between image key and fabric image.<br>**HATEOAS** links:<br>**region** - Region - Region for the mapping.
//
// swagger:model ImageMapping
type ImageMapping struct {

	// HATEOAS of the entity
	// Required: true
	Links map[string]Href `json:"_links"`

	// The id of the region for which this mapping is defined.
	ExternalRegionID string `json:"externalRegionId,omitempty"`

	// Image mapping defined for the particular region.
	// Required: true
	Mapping map[string]ImageMappingDescription `json:"mapping"`
}

// Validate validates this image mapping
func (m *ImageMapping) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMapping(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ImageMapping) validateLinks(formats strfmt.Registry) error {

	for k := range m.Links {

		if err := validate.Required("_links"+"."+k, "body", m.Links[k]); err != nil {
			return err
		}
		if val, ok := m.Links[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *ImageMapping) validateMapping(formats strfmt.Registry) error {

	for k := range m.Mapping {

		if err := validate.Required("mapping"+"."+k, "body", m.Mapping[k]); err != nil {
			return err
		}
		if val, ok := m.Mapping[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ImageMapping) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ImageMapping) UnmarshalBinary(b []byte) error {
	var res ImageMapping
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

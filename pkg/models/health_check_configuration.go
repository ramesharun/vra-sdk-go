// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HealthCheckConfiguration Load balancer health check configuration.
//
// swagger:model HealthCheckConfiguration
type HealthCheckConfiguration struct {

	// Number of consecutive successful checks before considering a particular back-end instance as healthy.
	HealthyThreshold int32 `json:"healthyThreshold,omitempty"`

	// Interval (in seconds) at which the health checks will be performed.
	IntervalSeconds int32 `json:"intervalSeconds,omitempty"`

	// Port on the back-end instance machine to use for the health check.
	// Required: true
	Port *string `json:"port"`

	// The protocol used for the health check.
	// Required: true
	Protocol *string `json:"protocol"`

	// Timeout (in seconds) to wait for a response from the back-end instance.
	TimeoutSeconds int32 `json:"timeoutSeconds,omitempty"`

	// Number of consecutive check failures before considering a particular back-end instance as unhealthy.
	UnhealthyThreshold int32 `json:"unhealthyThreshold,omitempty"`

	// URL path on the back-end instance against which a request will be performed for the health check. Useful when the health check protocol is HTTP/HTTPS.
	URLPath string `json:"urlPath,omitempty"`
}

// Validate validates this health check configuration
func (m *HealthCheckConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HealthCheckConfiguration) validatePort(formats strfmt.Registry) error {

	if err := validate.Required("port", "body", m.Port); err != nil {
		return err
	}

	return nil
}

func (m *HealthCheckConfiguration) validateProtocol(formats strfmt.Registry) error {

	if err := validate.Required("protocol", "body", m.Protocol); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HealthCheckConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HealthCheckConfiguration) UnmarshalBinary(b []byte) error {
	var res HealthCheckConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

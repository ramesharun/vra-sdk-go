// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CommitDetails CommitDetails
//
// swagger:model CommitDetails
type CommitDetails struct {

	// author name
	AuthorName string `json:"authorName,omitempty"`

	// comments
	Comments string `json:"comments,omitempty"`

	// commit Id
	CommitID string `json:"commitId,omitempty"`

	// committed date
	// Format: date-time
	CommittedDate strfmt.DateTime `json:"committedDate,omitempty"`

	// committer email
	CommitterEmail string `json:"committerEmail,omitempty"`

	// committer name
	CommitterName string `json:"committerName,omitempty"`
}

// Validate validates this commit details
func (m *CommitDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommittedDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommitDetails) validateCommittedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.CommittedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("committedDate", "body", "date-time", m.CommittedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CommitDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommitDetails) UnmarshalBinary(b []byte) error {
	var res CommitDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

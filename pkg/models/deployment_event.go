// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeploymentEvent DeploymentEvent
//
// Represents deployment events.
//
// swagger:model DeploymentEvent
type DeploymentEvent struct {

	// Creation time (e.g. date format '2019-07-13T23:16:49.310Z').
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// Deployment id to which the event applies to
	// Format: uuid
	DeploymentID strfmt.UUID `json:"deploymentId,omitempty"`

	// Longer user-friendly details of the event.
	Details string `json:"details,omitempty"`

	// Event identifier
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// Short user-friendly label of the event (e.g. 'shuting down myVM')
	Name string `json:"name,omitempty"`

	// Parent event/request identifier
	// Format: uuid
	ParentID strfmt.UUID `json:"parentId,omitempty"`

	// Optional resource name to which the event applies to
	ResourceName string `json:"resourceName,omitempty"`

	// Optional resource type to which the event applies to
	ResourceType string `json:"resourceType,omitempty"`

	// Last update time (e.g. date format '2019-07-13T23:16:49.310Z').
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updatedAt,omitempty"`
}

// Validate validates this deployment event
func (m *DeploymentEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeploymentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeploymentEvent) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DeploymentEvent) validateDeploymentID(formats strfmt.Registry) error {

	if swag.IsZero(m.DeploymentID) { // not required
		return nil
	}

	if err := validate.FormatOf("deploymentId", "body", "uuid", m.DeploymentID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DeploymentEvent) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DeploymentEvent) validateParentID(formats strfmt.Registry) error {

	if swag.IsZero(m.ParentID) { // not required
		return nil
	}

	if err := validate.FormatOf("parentId", "body", "uuid", m.ParentID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DeploymentEvent) validateUpdatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeploymentEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeploymentEvent) UnmarshalBinary(b []byte) error {
	var res DeploymentEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

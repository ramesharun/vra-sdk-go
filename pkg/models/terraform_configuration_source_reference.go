// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TerraformConfigurationSourceReference TerraformConfigurationSourceReference
//
// Reference information about a Terraform Configuration source that stores Terraform configuration files.
//
// swagger:model TerraformConfigurationSourceReference
type TerraformConfigurationSourceReference struct {

	// ID that identifies the commit that corresponds to the desired version of the remote file(s).
	CommitID string `json:"commitId,omitempty"`

	// The ID of the relevant configuration source repository.
	// Format: uuid
	RepositoryID strfmt.UUID `json:"repositoryId,omitempty"`

	// A path to the desired Terraform directory.
	SourceDirectory string `json:"sourceDirectory,omitempty"`
}

// Validate validates this terraform configuration source reference
func (m *TerraformConfigurationSourceReference) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRepositoryID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TerraformConfigurationSourceReference) validateRepositoryID(formats strfmt.Registry) error {

	if swag.IsZero(m.RepositoryID) { // not required
		return nil
	}

	if err := validate.FormatOf("repositoryId", "body", "uuid", m.RepositoryID.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TerraformConfigurationSourceReference) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TerraformConfigurationSourceReference) UnmarshalBinary(b []byte) error {
	var res TerraformConfigurationSourceReference
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
